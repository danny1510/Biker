// <auto-generated />
using System;
using Biker.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Biker.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200614061852_INITIALDB")]
    partial class INITIALDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Biker.Web.Data.Entities.BikeMakerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("BikeMakers");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Biker.BikerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEntityId");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Bikers");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Biker.BikerMotorEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BikerId");

                    b.Property<int?>("MotorBikeSpareId");

                    b.HasKey("Id");

                    b.HasIndex("BikerId");

                    b.HasIndex("MotorBikeSpareId");

                    b.ToTable("BikerMotors");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.BikeTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("BikeTypes");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.ManagerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserEntityId");

                    b.HasKey("Id");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.MotorBike.MotorBikeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Cylinder");

                    b.Property<int>("FrontTire");

                    b.Property<int>("HeightTireF");

                    b.Property<int>("HeightTireR");

                    b.Property<bool>("Millimeters");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("RearTire");

                    b.Property<int?>("TypeMakerId");

                    b.Property<int>("WidthTireF");

                    b.Property<int>("WidthTireR");

                    b.HasKey("Id");

                    b.HasIndex("TypeMakerId");

                    b.ToTable("MotorBikes");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.MotorBike.MotorBikeSaleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsAvailable");

                    b.Property<int?>("MotorBikeId");

                    b.Property<decimal>("Price");

                    b.Property<string>("Remasrks");

                    b.HasKey("Id");

                    b.HasIndex("MotorBikeId");

                    b.ToTable("MotorBikeSaleEntity");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.MotorBike.SpareCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("SpareCategories");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.MotorBikeSpareEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<int?>("MotorBikeId");

                    b.Property<int>("YearSince");

                    b.Property<int>("YearUntil");

                    b.HasKey("Id");

                    b.HasIndex("MotorBikeId");

                    b.ToTable("MotorBikeSpares");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Provider.ProviderDetailsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Direccion");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ProviderId");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderDetails");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Provider.ProviderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Provider.SpareProviderEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProviderId");

                    b.Property<int>("SpareId");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SpareId");

                    b.ToTable("SpareProviders");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Spare.BikeSpareEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MotorBikeSpareId");

                    b.Property<int?>("SpareId");

                    b.HasKey("Id");

                    b.HasIndex("MotorBikeSpareId");

                    b.HasIndex("SpareId");

                    b.ToTable("BikeSpares");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Spare.BrandCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SpareBrandId");

                    b.Property<int?>("SpareCategoryId");

                    b.HasKey("Id");

                    b.HasIndex("SpareBrandId");

                    b.HasIndex("SpareCategoryId");

                    b.ToTable("BrandCategories");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.SpareBrandEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("SpareBrands");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.SpareEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandCategoryId");

                    b.Property<string>("Code")
                        .IsRequired();

                    b.Property<float>("Discount");

                    b.Property<string>("ImageUrl");

                    b.Property<DateTime>("LastUpdate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Name1");

                    b.Property<string>("Name2");

                    b.Property<float>("Price");

                    b.HasKey("Id");

                    b.HasIndex("BrandCategoryId");

                    b.ToTable("Spares");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.TypeMakerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BikeMakerId");

                    b.Property<int?>("BikeTypeId");

                    b.Property<string>("ImageUrl");

                    b.HasKey("Id");

                    b.HasIndex("BikeMakerId");

                    b.HasIndex("BikeTypeId");

                    b.ToTable("TypeMakers");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .HasMaxLength(100);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Biker.BikerEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Biker.BikerMotorEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.Biker.BikerEntity", "Biker")
                        .WithMany("BikerMotors")
                        .HasForeignKey("BikerId");

                    b.HasOne("Biker.Web.Data.Entities.MotorBikeSpareEntity", "MotorBikeSpare")
                        .WithMany("BikerMotors")
                        .HasForeignKey("MotorBikeSpareId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.ManagerEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.UserEntity", "UserEntity")
                        .WithMany()
                        .HasForeignKey("UserEntityId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.MotorBike.MotorBikeEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.TypeMakerEntity", "TypeMaker")
                        .WithMany("Motorbikes")
                        .HasForeignKey("TypeMakerId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.MotorBike.MotorBikeSaleEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.MotorBike.MotorBikeEntity", "MotorBike")
                        .WithMany("MotorBikeSales")
                        .HasForeignKey("MotorBikeId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.MotorBikeSpareEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.MotorBike.MotorBikeEntity", "MotorBike")
                        .WithMany("MotorBikeSpares")
                        .HasForeignKey("MotorBikeId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Provider.ProviderDetailsEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.Provider.ProviderEntity", "Provider")
                        .WithMany("ProviderDetails")
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Provider.SpareProviderEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.Provider.ProviderEntity", "Provider")
                        .WithMany("spareProviders")
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biker.Web.Data.Entities.SpareEntity", "Spare")
                        .WithMany("SpareProviders")
                        .HasForeignKey("SpareId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Spare.BikeSpareEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.MotorBikeSpareEntity", "MotorBikeSpare")
                        .WithMany()
                        .HasForeignKey("MotorBikeSpareId");

                    b.HasOne("Biker.Web.Data.Entities.SpareEntity", "Spare")
                        .WithMany()
                        .HasForeignKey("SpareId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.Spare.BrandCategoryEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.SpareBrandEntity", "SpareBrand")
                        .WithMany("BrandCategories")
                        .HasForeignKey("SpareBrandId");

                    b.HasOne("Biker.Web.Data.Entities.MotorBike.SpareCategoryEntity", "SpareCategory")
                        .WithMany("BrandCategories")
                        .HasForeignKey("SpareCategoryId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.SpareEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.Spare.BrandCategoryEntity", "BrandCategory")
                        .WithMany("Spares")
                        .HasForeignKey("BrandCategoryId");
                });

            modelBuilder.Entity("Biker.Web.Data.Entities.TypeMakerEntity", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.BikeMakerEntity", "BikeMaker")
                        .WithMany("TypeMaker")
                        .HasForeignKey("BikeMakerId");

                    b.HasOne("Biker.Web.Data.Entities.BikeTypeEntity", "BikeType")
                        .WithMany("TypeMaker")
                        .HasForeignKey("BikeTypeId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Biker.Web.Data.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Biker.Web.Data.Entities.UserEntity")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
